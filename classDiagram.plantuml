@startuml

abstract class Compte {
 - numero: String // Changed to String for more flexibility (e.g., alphanumeric)
 - solde: double
 - dateOuverture: LocalDate // Added for account creation date
 - client: Client
 + deposer(montant: double): void
 + retirer(montant: double): void
 + afficherSolde(): void
 + getNumero(): String // Added getter
 + getSolde(): double // Added getter
}

class CompteCourant {
 - decouvertAutorise: double // Renamed for clarity
}

class CompteEpargne {
 - tauxInteret: double
 + calculerInterets(): double
}

class Client {
 - id: String // Changed to String for more flexibility
 - nom: String
 - prenom: String // Added prenom for better client representation
 - email: String
 - telephone: String // Added for better contact info
 - adresse: String // Added for client address
 - motDePasseHash: String // Storing password hash
 - comptes: List<Compte>
 + ajouterCompte(c: Compte): void
 + supprimerCompte(numeroCompte: String): void // Parameter changed to String
 + effectuerVirement(compteSource: Compte, compteDestination: Compte, montant: double): void
 + getNomComplet(): String // Added for convenience
 + getEmail(): String // Added getter
 + getId(): String // Added getter
}

class Transaction {
 - id: String // Changed to String
 - type: String // "DEBIT", "CREDIT", "TRANSFERT" (use enums if possible)
 - montant: double
 - date: LocalDateTime // Changed to LocalDateTime for time precision
 - description: String // Added for more context
 - compteSource: Compte
 - compteDestination: Compte // Nullable only if type is not TRANSFERT
 + getCompteSource(): Compte // Added getter
 + getCompteDestination(): Compte // Added getter
 + getMontant(): double // Added getter
 + getDate(): LocalDateTime // Added getter
}

class Admin {
 - id: String // Added for unique admin identification
 - login: String
 - motDePasseHash: String // Storing password hash
 - roles: List<Role> // Admin can have multiple roles
 + bloquerCompte(c: Compte): void
 + debloquerCompte(c: Compte): void
 + consulterClients(): List<Client> // Returns a list of clients
 + consulterTransactions(): List<Transaction> // Added for admin oversight
 + gererUtilisateurs(): void // Placeholder for user management (clients/other admins)
}

class Agence {
 - id: String // Added for unique agency identification
 - nom: String
 - adresse: String
 - clients: List<Client>
 - comptes: List<Compte> // Agence manages all accounts
 - transactions: List<Transaction>
 + ajouterClient(c: Client): void
 + trouverClient(idClient: String): Client
 + ajouterTransaction(t: Transaction): void
 + trouverCompte(numeroCompte: String): Compte // Added to find accounts within the agency
}

class Notification {
 - id: String // Added for unique notification identification
 - message: String
 - date: LocalDateTime // For precise notification time
 - lu: boolean
 - destinataire: Client // Notification is for a specific client
}

class Message {
 - id: String // Added for unique message identification
 - sujet: String
 - contenu: String
 - date: LocalDateTime // For precise message time
 - expediteur: Client
 - destinataire: Admin
 - lu: boolean // Added to track if the message has been read
}

class JournalAction {
 - id: String // Added for unique log identification
 - action: String
 - date: LocalDateTime // For precise action time
 - acteur: String // e.g., "Client ID: 123", "Admin Login: adminUser"
 - details: String // Added for more descriptive logging
}

' Relationships '
CompteCourant --|> Compte
CompteEpargne --|> Compte

Client "1" o-- "0..*" Compte : possede
Transaction "0..*" -- "1" Compte : source
Transaction "0..*" -- "0..1" Compte : destination

Agence "1" o-- "0..*" Client : gere
Agence "1" o-- "0..*" Compte : contient
Agence "1" o-- "0..*" Transaction : enregistre



AuthentificationService ..> GestionMotDePasse
AuthentificationService ..> Client
AuthentificationService ..> Admin

Notification "0..*" -- "1" Client : estEnvoyeeA

Message "0..*" -- "1" Client : estEnvoyePar
Message "0..*" -- "1" Admin : estRecuPar

JournalAction "0..*" -- "1" Admin : generePar
JournalAction "0..*" -- "1" Client : generePar

@enduml